name: Deploy to AWS EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: '3.11'
    - name: Set Environment Variables for Django
      run: | 
        echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" 
        echo "ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }}" 
        echo "DEBUG=${{ secrets.DEBUG }}" 
        echo "DB_NAME=${{ secrets.DB_NAME }}" 
        echo "DB_USER=${{ secrets.DB_USER }}" 
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" 
      
    - name: Install Dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Collectstatic
      run: |
        python production-manage.py collectstatic --noinput

    - name: Build Docker Image
      run: |
        docker build -t happyhours-app .

    - name: Save Docker Image
      run: |
        docker save happyhours-app | gzip > happyhours-app.tar.gz

    - name: Transfer Docker Image to EC2
      uses: appleboy/scp-action@v0.1.1
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        source: "happyhours-app.tar.gz"
        target: "/home/ubuntu/"

    - name: Load Docker Image on EC2
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        script: |
                  docker load < /home/ubuntu/happyhours-app.tar.gz
                  echo "ALLOWED_HOSTS='${{ secrets.ALLOWED_HOSTS }}'" > /home/ubuntu/.env
                  echo "SECRET_KEY='${{ secrets.SECRET_KEY }}'" >> /home/ubuntu/.env
                  echo "DB_NAME='${{ secrets.DB_NAME }}'" >> /home/ubuntu/.env
                  echo "DB_USER='${{ secrets.DB_USER }}'" >> /home/ubuntu/.env
                  echo "DB_PASSWORD='${{ secrets.DB_PASSWORD }}'" >> /home/ubuntu/.env
                  echo "DB_HOST='db'" >> /home/ubuntu/.env
                  echo "DB_PORT='${{ secrets.DB_PORT }}'" >> /home/ubuntu/.env
                  cd /home/ubuntu
                  docker-compose -f docker-compose.yml up -d --force-recreate
                  docker-compose -f /home/ubuntu/docker-compose.yml run web python production-manage.py migrate --noinput
